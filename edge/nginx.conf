# events {
#     worker_connections 2000;
#     use epoll;
# }

# http {
    server {
        listen 80;

        location / {
            set $upstream '';

            access_by_lua_block {
                local redis = require "resty.redis"
                local client = redis:new()
                -- print(ngx.shared)
                local ok, err = client:connect(os.getenv("REDIS_HOST"), tonumber(os.getenv("REDIS_PORT")))
                if not ok then
                    ngx.say("failed to connect: ", err)
                    return
                end

                -- print(ngx.DEBUG, ngx.var.uri)
                matches, err = ngx.re.match(ngx.var.uri, "/([0-9a-f]+)(/.*)?")
                if not matches then
                    ngx.say("failed to regex: ", err)
                    return
                end

                local function_status = client:get(matches[1]..':status')
                if not function_status then
                    ngx.say("function not found")
                    return
                end

                if function_status == 'running' then
                    ngx.var.upstream = client:get(matches[1]..':ip')
                elseif function_status == 'expire' then
                    ngx.say('function expired', function_status)
                    return
                else
                    ngx.say('function not ready ', function_status)
                    return
                end
                client:expire(matches[1]..':alive', client:get(matches[1]..':live_time'))
                client:incr(matches[1]..':visit_count')
                -- ngx.log(ngx.DEBUG, matches[1])
                -- ngx.log(ngx.DEBUG, matches[2])
                -- io.write(ngx.var.uri)
                -- ngx.say('hello')
                client:set_keepalive(100000, 100)
            }
            # rewrite_by_lua_block {
            #     io.write('hello')
            #     ngx.say('hello')
            # }
            # proxy_pass http://172.17.0.2:5000;
            proxy_pass http://$upstream;

            chunked_transfer_encoding off;
        }

        error_log stderr debug;
    }
# }
